# Generated by Django 4.2.2 on 2023-07-17 03:53

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomGroup',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('codigo', models.CharField(max_length=100, null=True, unique=True)),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dni', models.CharField(default=None, max_length=8, null=True)),
                ('fecha', models.DateTimeField(blank=True, null=True)),
                ('nacionalidad', models.CharField(blank=True, choices=[('AF', 'Afganistán'), ('AL', 'Albania'), ('DE', 'Alemania'), ('AD', 'Andorra'), ('AO', 'Angola'), ('AG', 'Antigua y Barbuda'), ('SA', 'Arabia Saudita'), ('DZ', 'Argelia'), ('AR', 'Argentina'), ('AM', 'Armenia'), ('AU', 'Australia'), ('AT', 'Austria'), ('AZ', 'Azerbaiyán'), ('BS', 'Bahamas'), ('BH', 'Baréin'), ('BD', 'Bangladés'), ('BB', 'Barbados'), ('BE', 'Bélgica'), ('BZ', 'Belice'), ('BJ', 'Benín'), ('BM', 'Bermudas'), ('BY', 'Bielorrusia'), ('BO', 'Bolivia'), ('BA', 'Bosnia y Herzegovina'), ('BW', 'Botsuana'), ('BR', 'Brasil'), ('BN', 'Brunéi'), ('BG', 'Bulgaria'), ('BF', 'Burkina Faso'), ('BI', 'Burundi'), ('BT', 'Bután'), ('CV', 'Cabo Verde'), ('KH', 'Camboya'), ('CM', 'Camerún'), ('CA', 'Canadá'), ('QA', 'Catar'), ('TD', 'Chad'), ('CL', 'Chile'), ('CN', 'China'), ('CY', 'Chipre'), ('CO', 'Colombia'), ('KM', 'Comoras'), ('CG', 'Congo'), ('KP', 'Corea del Norte'), ('KR', 'Corea del Sur'), ('CI', 'Costa de Marfil'), ('CR', 'Costa Rica'), ('HR', 'Croacia'), ('CU', 'Cuba'), ('DK', 'Dinamarca'), ('DM', 'Dominica'), ('EC', 'Ecuador'), ('EG', 'Egipto'), ('SV', 'El Salvador'), ('AE', 'Emiratos Árabes Unidos'), ('ER', 'Eritrea'), ('SK', 'Eslovaquia'), ('SI', 'Eslovenia'), ('ES', 'España'), ('US', 'Estados Unidos'), ('EE', 'Estonia'), ('ET', 'Etiopía'), ('PH', 'Filipinas'), ('FI', 'Finlandia'), ('FJ', 'Fiyi'), ('FR', 'Francia'), ('GA', 'Gabón'), ('GM', 'Gambia'), ('GE', 'Georgia'), ('GH', 'Ghana'), ('GR', 'Grecia'), ('GD', 'Granada'), ('GT', 'Guatemala'), ('GN', 'Guinea'), ('GW', 'Guinea-Bisáu'), ('GQ', 'Guinea Ecuatorial'), ('GY', 'Guyana'), ('HT', 'Haití'), ('HN', 'Honduras'), ('HU', 'Hungría'), ('IN', 'India'), ('ID', 'Indonesia'), ('IR', 'Irán'), ('IQ', 'Iraq'), ('IE', 'Irlanda'), ('IS', 'Islandia'), ('IL', 'Israel'), ('IT', 'Italia'), ('JM', 'Jamaica'), ('JP', 'Japón'), ('JO', 'Jordania'), ('KZ', 'Kazajistán'), ('KE', 'Kenia'), ('KG', 'Kirguistán'), ('KI', 'Kiribati'), ('KW', 'Kuwait'), ('LA', 'Laos'), ('LS', 'Lesoto'), ('LV', 'Letonia'), ('LB', 'Líbano'), ('LR', 'Liberia'), ('LY', 'Libia'), ('LI', 'Liechtenstein'), ('LT', 'Lituania'), ('LU', 'Luxemburgo'), ('MG', 'Madagascar'), ('MY', 'Malasia'), ('MW', 'Malaui'), ('MV', 'Maldivas'), ('ML', 'Malí'), ('MT', 'Malta'), ('MA', 'Marruecos'), ('MU', 'Mauricio'), ('MR', 'Mauritania'), ('MX', 'México'), ('FM', 'Micronesia'), ('MD', 'Moldavia'), ('MC', 'Mónaco'), ('MN', 'Mongolia'), ('ME', 'Montenegro'), ('MZ', 'Mozambique'), ('MM', 'Myanmar'), ('NA', 'Namibia'), ('NR', 'Nauru'), ('NP', 'Nepal'), ('NI', 'Nicaragua'), ('NE', 'Níger'), ('NG', 'Nigeria'), ('NO', 'Noruega'), ('NZ', 'Nueva Zelanda'), ('OM', 'Omán'), ('NL', 'Países Bajos'), ('PK', 'Pakistán'), ('PW', 'Palaos'), ('PA', 'Panamá'), ('PG', 'Papúa Nueva Guinea'), ('PY', 'Paraguay'), ('PE', 'Perú'), ('PL', 'Polonia'), ('PT', 'Portugal'), ('GB', 'Reino Unido'), ('CF', 'República Centroafricana'), ('CZ', 'República Checa'), ('CD', 'República Democrática del Congo'), ('DO', 'República Dominicana'), ('RO', 'Rumania'), ('RW', 'Ruanda'), ('RU', 'Rusia'), ('KN', 'San Cristóbal y Nieves'), ('SM', 'San Marino'), ('VC', 'San Vicente y las Granadinas'), ('SH', 'Santa Elena'), ('LC', 'Santa Lucía'), ('ST', 'Santo Tomé y Príncipe'), ('SN', 'Senegal'), ('RS', 'Serbia'), ('SC', 'Seychelles'), ('SL', 'Sierra Leona'), ('SG', 'Singapur'), ('SY', 'Siria'), ('SO', 'Somalia'), ('LK', 'Sri Lanka'), ('SZ', 'Suazilandia'), ('ZA', 'Sudáfrica'), ('SD', 'Sudán'), ('SS', 'Sudán del Sur'), ('SE', 'Suecia'), ('CH', 'Suiza'), ('SR', 'Surinam'), ('TJ', 'Tayikistán'), ('TH', 'Tailandia'), ('TW', 'Taiwán'), ('TZ', 'Tanzania'), ('TL', 'Timor Oriental'), ('TG', 'Togo'), ('TO', 'Tonga'), ('TT', 'Trinidad y Tobago'), ('TN', 'Túnez'), ('TM', 'Turkmenistán'), ('TR', 'Turquía'), ('TV', 'Tuvalu'), ('UA', 'Ucrania'), ('UG', 'Uganda'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistán'), ('VU', 'Vanuatu'), ('VE', 'Venezuela'), ('VN', 'Vietnam'), ('YE', 'Yemen'), ('DJ', 'Yibuti'), ('ZM', 'Zambia'), ('ZW', 'Zimbabue')], default='PE', max_length=200, null=True)),
                ('estadoCivil', models.CharField(blank=True, choices=[('s', 'Soltero'), ('c', 'Casado'), ('v', 'Viudo'), ('v', 'Divorciado')], default='s', max_length=200, null=True)),
                ('correoElectronico', models.EmailField(blank=True, max_length=200, null=True)),
                ('celular', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe ingresarse en el formato: '+999999999'. Se permiten hasta 15 dígitos.", regex='^\\+?1?\\d{9,15}$')])),
                ('telefonoFijo', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="El número de teléfono debe ingresarse en el formato: '+999999999'. Se permiten hasta 15 dígitos.", regex='^\\+?1?\\d{9,15}$')])),
                ('profesion', models.CharField(blank=True, max_length=200, null=True)),
                ('talla_polo', models.CharField(blank=True, choices=[('XS', 'XS'), ('S', 'S'), ('M', 'M'), ('L', 'L'), ('XL', 'XL'), ('XXL', 'XXL'), ('XXXL', 'XXXL')], default='', max_length=200, null=True)),
                ('cuenta_ahorros', models.CharField(blank=True, max_length=14, null=True)),
                ('contacto_caso_accidentes', models.CharField(blank=True, max_length=200, null=True)),
                ('parentesco_contacto_caso_accidentes', models.CharField(blank=True, max_length=200, null=True)),
                ('grupo_sanguineo', models.CharField(blank=True, choices=[('A+', 'A positivo'), ('A-', 'A negativo'), ('B+', 'B positivo'), ('B-', 'B negativo'), ('AB+', 'AB positivo'), ('AB-', 'AB negativo'), ('O+', 'O positivo'), ('O-', 'O negativo')], max_length=200, null=True)),
                ('alergias', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, null=True, size=None)),
                ('fondo_pension', models.CharField(blank=True, choices=[('o', 'ONP'), ('a', 'AFP'), ('p', 'Pendiente')], default='p', max_length=200, null=True)),
                ('primerTrabajo', models.CharField(blank=True, max_length=200, null=True)),
                ('hijos', models.PositiveIntegerField(blank=True, null=True)),
                ('conyuge', models.CharField(blank=True, max_length=200, null=True)),
                ('p_mp', models.CharField(blank=True, max_length=200, null=True)),
                ('fecha_inicio_contrato', models.DateField(blank=True, max_length=200, null=True)),
                ('fecha_fin_contrato', models.DateField(blank=True, max_length=200, null=True)),
                ('sueldo', models.FloatField(blank=True, max_length=200, null=True)),
                ('horaio', models.CharField(blank=True, max_length=200, null=True)),
                ('documentos', models.FileField(blank=True, null=True, upload_to='documentos/')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('perfil', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='cuenta.profile')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
